1 常数时间的操作
数组寻址    是
链表寻址    不是
时间复杂度
常数操作的数量
时间复杂度是评价一个算法的主要指标，其次是额外的空间复杂度
常见的常数时间的操作
·常见的算术运算(+、-、*、/、% 等)
·常见的位运算(>>、>>>、<<、|、&、^等)
·赋值、比较、自增、自减操作等
·数组寻址操作
总之，执行时间固定的操作都是常数时间的操作。
反之，执行时间不固定的操作，都不是常数时间的操作。
整个流程中开辟的是有限的几个变量 空间复杂度就是O(1)
如果开辟的是一个map map有可能达到数组的数量 空间复杂度就是O(N)
输入输出都是不算空间复杂度都是O(1),用户要求返回一个数组，你直接返回就是O(1)
要是要求输出一个整数，你计算终用了数组就是O(N)

我们会发现，时间复杂度这个指标，是忽略低阶项和所有常数系数的。
难道同样时间复杂度的流程，在实际运行时候就一样的好吗?
当然不是。
时间复杂度只是一个很重要的指标而已。如果两个时间复杂度一样的算法你还要去在时间上拼优劣，就进入到拼常数时间的阶段，简称拼常数项。就是实际跑看时间。 最优解不包含常数时间的

算法和数据结构学习的大脉络
1)知道怎么算的算法
2)知道怎么试的算法
我们所有的题目讲解，对于大脉络的实践贯穿始终

认识对数器
你在网上找到了某个公司的面试题，你想了好久，感觉自己会做，但是你找不到在线测试，你好心烦..
你和朋友交流面试题，你想了好久，感觉自己会做，但是你找不到在线测试你好心烦..
你在网上做笔试，但是前几个测试用例都过了，突然一个巨大无比数据量来了，结果你的代码报错了，如此大的数据量根本看不出哪错了，你好心烦…